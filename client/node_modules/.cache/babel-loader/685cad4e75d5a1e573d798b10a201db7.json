{"ast":null,"code":"// import './App.css';\n// import React,{Fragment,useEffect} from \"react\";\n// // import {Routes , Route,Router} from 'react-router-dom'\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// import Navbar from \"./componets/layout/Navbar\"\n// import Landing from \"./componets/layout/Landing\"\n// import Register from \"./componets/auth/Register\"\n// import Login from \"./componets/auth/Login\";\n// import Alert from \"./componets/layout/Alert\";\n// //REDUX\n// import {Provider} from \"react-redux\";\n// import store from \"./store\"\n// import { loadUser } from './actions/auth';\n// import setAuthToken from './utils/setAuthToken';\n// if(localStorage.token){\n//   setAuthToken(localStorage.token);\n// }\n// function App() {\n//   useEffect(()=>{\n//     store.dispatch(loadUser)\n//   },[])\n//   // [] means =>If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) \n//   //as a second argument. This tells React that your effect doesn’t depend\n//   // on any values from props or state, so it never needs to re-run.\n//   return (\n//         <Provider store={store}>\n//         <div  className=\"App\">\n//         <Navbar />\n//         <Routes>\n//           <Route path=\"/\" element={<Landing /> } />\n//         </Routes>\n//         <section className=\"container\">\n//         <Alert />\n//         <Routes>\n//         <Route  path=\"/register\" element={<Register/>} />\n//         <Route  path=\"/login\" element={<Login/>} />\n//         </Routes>\n//         </section>\n//         </div>\n//         </Provider>\n//   )\n// }\n// export default App;\n// const App = () =>\n// <Router>\n// <Fragment >\n//       <Navbar/>\n//       <Route exact path = '/' component={Landing}/>\n//     </Fragment>\n// </Router>\n//   // <Fragment>\n//   //   <Navbar />\n//   //   <Landing />\n//   // </Fragment>\n// export default App;","map":{"version":3,"sources":["/home/dell/Desktop/Nodejwt/client/src/App.js"],"names":[],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA","sourcesContent":["\n// import './App.css';\n// import React,{Fragment,useEffect} from \"react\";\n// // import {Routes , Route,Router} from 'react-router-dom'\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// import Navbar from \"./componets/layout/Navbar\"\n// import Landing from \"./componets/layout/Landing\"\n// import Register from \"./componets/auth/Register\"\n// import Login from \"./componets/auth/Login\";\n// import Alert from \"./componets/layout/Alert\";\n\n// //REDUX\n// import {Provider} from \"react-redux\";\n// import store from \"./store\"\n// import { loadUser } from './actions/auth';\n// import setAuthToken from './utils/setAuthToken';\n\n// if(localStorage.token){\n//   setAuthToken(localStorage.token);\n// }\n\n\n\n// function App() {\n//   useEffect(()=>{\n//     store.dispatch(loadUser)\n//   },[])\n\n//   // [] means =>If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) \n//   //as a second argument. This tells React that your effect doesn’t depend\n//   // on any values from props or state, so it never needs to re-run.\n\n//   return (\n//         <Provider store={store}>\n//         <div  className=\"App\">\n        \n//         <Navbar />\n        \n//         <Routes>\n//           <Route path=\"/\" element={<Landing /> } />\n//         </Routes>\n//         <section className=\"container\">\n//         <Alert />\n//         <Routes>\n//         <Route  path=\"/register\" element={<Register/>} />\n//         <Route  path=\"/login\" element={<Login/>} />\n//         </Routes>\n//         </section>\n//         </div>\n//         </Provider>\n\n//   )\n// }\n\n// export default App;\n\n\n\n\n\n\n// const App = () =>\n\n// <Router>\n// <Fragment >\n//       <Navbar/>\n//       <Route exact path = '/' component={Landing}/>\n//     </Fragment>\n// </Router>\n//   // <Fragment>\n//   //   <Navbar />\n//   //   <Landing />\n//   // </Fragment>\n\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}